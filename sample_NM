class NelderMead:
    def _init_(self, dm, spacing=20):
        self.iom = iom
        self.history = []
        self.im_history = []
        self.spacing = spacing
        
    def get_ims(self):
        return np.array(self.im_history)

    def f(self, x):
        # Set actuators
        iom.dm.setActuators(x)
        
        # Wait for transient effects
        # time.sleep(0.09)
        
        # Record & report cost     
        im = iom.get_PSF()
        should_plot = len(self.history) % self.spacing == 0
        
        val = iom.PSF_cost_im(im, plot=should_plot)
        print(val)
        self.history.append(val)
        
        if should_plot:
            self.im_history.append(im)
        
        return val

    def nelder_mead(self, x0) :
        opts = {'maxiter': 5000, 'adaptive': True}
        
        result = minimize(self.f, x0, method='Nelder-Mead', tol=1, options=opts)

        print('Status : %s' % result['message'])
        print('Total Evaluations: %d' % result['nfev'])

        solution = result['x']
        evaluation = result['fun']
        print('Solution: f(%s) = %.5f' % (solution, evaluation))
        # plot history 
        plt.plot(self.history)
        plt.show()
        print(result)
        
        return solution
        
  
if _name_ == '_main_':
    np.random.seed(2)
    
    with io_manager(exposure=100, nframes=3, x=300, y=200, h=600, w=700) as iom:
        a = NelderMead(iom)
        
        # u = np.array([-1.21822648e-01, -4.25483717e-01,  1.11505896e-01, -1.35106673e-01, -1.70059898e-01, -2.86163488e-01, -3.90679805e-01,  2.77355986e-01, -3.95255717e-01, -4.72608879e-01,  2.67302294e-01,  6.57840023e-02, -4.86297120e-01,  2.92592472e-02, -6.62834879e-01,  6.01488716e-01, 5.91434449e-01, -1.19639998e-02,  8.76081714e-01, -5.84750591e-01, 1.12832045e-02, -9.29299845e-01, -1.51090077e-01, -9.75785132e-01, -7.72713513e-01,  2.07967422e-01, -6.16833934e-01, -7.65604852e-01, -5.05080657e-01, -3.10486985e-01, -6.94251791e-02, -6.70635398e-01, 2.81248334e-01, -3.63537186e-02,  1.12976623e-02, -2.29086434e-01, 6.95685150e-01,  1.67941901e-01, -7.32123311e-01,  4.41851235e-01, 9.57700695e-01,  1.82646606e-05,  4.97909129e-01])
        
        # u = 2*np.random.rand(len(iom.dm)) - 1
        
        u = np.array([-0.12476328150948834, -0.6192684971044772, 0.1059363164891451, -0.1281861174123655, -0.15819192148538513, -0.30692658211547025, -0.49711109226605343, 0.25703740195813607, -0.40458233355312834, -0.4892852486423926, 0.25014303686680983, 0.05960136428005417, -0.6333205562395436, 0.027761728053450084, -0.6071011501131965, 0.602527546646071, 0.717275828328192, -0.012110836340410623, 0.7259352613228701, -0.7926829599793331, 0.010724160487951422, -0.9218557865777183, -0.1458575754177347, -0.8837430488561632, -0.7723120991906854, 0.19595608265098413, -0.577823906710786, -0.7963041833388679, -0.5387261439464706, -0.30235230700116944, -0.0661441043694923, -0.6125835685376694, 0.28844917487577043, -0.0346167370366245, 0.010795295260600291, -0.22835806351353183, 0.6274976742869676, 0.1635881254991736, -0.6538678958307537, 0.421894343888465, 0.9811667435665657, 1.718777318252402e-05, 0.664212170740743])

        u_opt = a.nelder_mead(u)
        
        print('\n'*4, list(u_opt))
        
        np.save('res.npy', a.get_ims())
